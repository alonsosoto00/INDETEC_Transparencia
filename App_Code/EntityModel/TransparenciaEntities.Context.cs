//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EntityModel
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class TransparenciaEntities : DbContext
    {
        public TransparenciaEntities()
            : base("name=TransparenciaEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<CatalogoTransparencia> CatalogoTransparencias { get; set; }
        public virtual DbSet<CatalogoTransparenciaReporte> CatalogoTransparenciaReportes { get; set; }
        public virtual DbSet<ControlesMaestro> ControlesMaestros { get; set; }
        public virtual DbSet<ControlesMaestrosTiposRango> ControlesMaestrosTiposRangos { get; set; }
        public virtual DbSet<MapeosReporte> MapeosReportes { get; set; }
        public virtual DbSet<Usuario> Usuarios { get; set; }
    
        [DbFunction("TransparenciaEntities", "fn_GetArbolCatalogoTransparencia")]
        public virtual IQueryable<ArbolCatalogoTransparencia> fn_GetArbolCatalogoTransparencia()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<ArbolCatalogoTransparencia>("[TransparenciaEntities].[fn_GetArbolCatalogoTransparencia]()");
        }
    
        [DbFunction("TransparenciaEntities", "fn_GetCMTiposRangos")]
        public virtual IQueryable<ControlesMaestrosTiposRango> fn_GetCMTiposRangos()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<ControlesMaestrosTiposRango>("[TransparenciaEntities].[fn_GetCMTiposRangos]()");
        }
    
        [DbFunction("TransparenciaEntities", "fn_GetListadoArchivos")]
        public virtual IQueryable<ListadoArchivos> fn_GetListadoArchivos(Nullable<System.Guid> nodoId, Nullable<bool> mostrarFiltrados)
        {
            var nodoIdParameter = nodoId.HasValue ?
                new ObjectParameter("nodoId", nodoId) :
                new ObjectParameter("nodoId", typeof(System.Guid));
    
            var mostrarFiltradosParameter = mostrarFiltrados.HasValue ?
                new ObjectParameter("mostrarFiltrados", mostrarFiltrados) :
                new ObjectParameter("mostrarFiltrados", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<ListadoArchivos>("[TransparenciaEntities].[fn_GetListadoArchivos](@nodoId, @mostrarFiltrados)", nodoIdParameter, mostrarFiltradosParameter);
        }
    
        [DbFunction("TransparenciaEntities", "fn_VerificaUsuario")]
        public virtual IQueryable<Usuario> fn_VerificaUsuario(string nombreUsuario, string password)
        {
            var nombreUsuarioParameter = nombreUsuario != null ?
                new ObjectParameter("nombreUsuario", nombreUsuario) :
                new ObjectParameter("nombreUsuario", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Usuario>("[TransparenciaEntities].[fn_VerificaUsuario](@nombreUsuario, @password)", nombreUsuarioParameter, passwordParameter);
        }
    
        public virtual int sp_ActualizaCatalogoTransparenciaReportes(Nullable<System.Guid> id, Nullable<System.Guid> mapeoId, string nombreArchivo, string descripcionArchivo, Nullable<System.DateTime> fechaInicio, Nullable<System.DateTime> fechaFin, Nullable<bool> visible, Nullable<System.Guid> modificadoPor)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(System.Guid));
    
            var mapeoIdParameter = mapeoId.HasValue ?
                new ObjectParameter("mapeoId", mapeoId) :
                new ObjectParameter("mapeoId", typeof(System.Guid));
    
            var nombreArchivoParameter = nombreArchivo != null ?
                new ObjectParameter("nombreArchivo", nombreArchivo) :
                new ObjectParameter("nombreArchivo", typeof(string));
    
            var descripcionArchivoParameter = descripcionArchivo != null ?
                new ObjectParameter("descripcionArchivo", descripcionArchivo) :
                new ObjectParameter("descripcionArchivo", typeof(string));
    
            var fechaInicioParameter = fechaInicio.HasValue ?
                new ObjectParameter("fechaInicio", fechaInicio) :
                new ObjectParameter("fechaInicio", typeof(System.DateTime));
    
            var fechaFinParameter = fechaFin.HasValue ?
                new ObjectParameter("fechaFin", fechaFin) :
                new ObjectParameter("fechaFin", typeof(System.DateTime));
    
            var visibleParameter = visible.HasValue ?
                new ObjectParameter("visible", visible) :
                new ObjectParameter("visible", typeof(bool));
    
            var modificadoPorParameter = modificadoPor.HasValue ?
                new ObjectParameter("modificadoPor", modificadoPor) :
                new ObjectParameter("modificadoPor", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ActualizaCatalogoTransparenciaReportes", idParameter, mapeoIdParameter, nombreArchivoParameter, descripcionArchivoParameter, fechaInicioParameter, fechaFinParameter, visibleParameter, modificadoPorParameter);
        }
    
        public virtual int sp_ActualizaDescripcionNodoCatalogoTransparencia(Nullable<System.Guid> nodoId, string descripcion, Nullable<System.Guid> modificadoPorId)
        {
            var nodoIdParameter = nodoId.HasValue ?
                new ObjectParameter("nodoId", nodoId) :
                new ObjectParameter("nodoId", typeof(System.Guid));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("descripcion", descripcion) :
                new ObjectParameter("descripcion", typeof(string));
    
            var modificadoPorIdParameter = modificadoPorId.HasValue ?
                new ObjectParameter("modificadoPorId", modificadoPorId) :
                new ObjectParameter("modificadoPorId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ActualizaDescripcionNodoCatalogoTransparencia", nodoIdParameter, descripcionParameter, modificadoPorIdParameter);
        }
    
        public virtual int sp_ActualizaPosicionNodoCatalogoTransparencia(Nullable<System.Guid> nodoId, Nullable<System.Guid> nodoPadreId, Nullable<int> orden, Nullable<System.Guid> modificadoPor)
        {
            var nodoIdParameter = nodoId.HasValue ?
                new ObjectParameter("nodoId", nodoId) :
                new ObjectParameter("nodoId", typeof(System.Guid));
    
            var nodoPadreIdParameter = nodoPadreId.HasValue ?
                new ObjectParameter("nodoPadreId", nodoPadreId) :
                new ObjectParameter("nodoPadreId", typeof(System.Guid));
    
            var ordenParameter = orden.HasValue ?
                new ObjectParameter("orden", orden) :
                new ObjectParameter("orden", typeof(int));
    
            var modificadoPorParameter = modificadoPor.HasValue ?
                new ObjectParameter("modificadoPor", modificadoPor) :
                new ObjectParameter("modificadoPor", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ActualizaPosicionNodoCatalogoTransparencia", nodoIdParameter, nodoPadreIdParameter, ordenParameter, modificadoPorParameter);
        }
    
        public virtual int sp_ActualizaRangoNodoCatalogoTransparencia(Nullable<System.Guid> nodoId, Nullable<System.Guid> tipoRangoId, Nullable<int> rango, Nullable<System.Guid> modificadoPor)
        {
            var nodoIdParameter = nodoId.HasValue ?
                new ObjectParameter("nodoId", nodoId) :
                new ObjectParameter("nodoId", typeof(System.Guid));
    
            var tipoRangoIdParameter = tipoRangoId.HasValue ?
                new ObjectParameter("tipoRangoId", tipoRangoId) :
                new ObjectParameter("tipoRangoId", typeof(System.Guid));
    
            var rangoParameter = rango.HasValue ?
                new ObjectParameter("rango", rango) :
                new ObjectParameter("rango", typeof(int));
    
            var modificadoPorParameter = modificadoPor.HasValue ?
                new ObjectParameter("modificadoPor", modificadoPor) :
                new ObjectParameter("modificadoPor", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ActualizaRangoNodoCatalogoTransparencia", nodoIdParameter, tipoRangoIdParameter, rangoParameter, modificadoPorParameter);
        }
    
        public virtual int sp_ActualizaTextoNodoCatalogoTransparencia(Nullable<System.Guid> nodoId, string texto, Nullable<System.Guid> modificadoPor)
        {
            var nodoIdParameter = nodoId.HasValue ?
                new ObjectParameter("nodoId", nodoId) :
                new ObjectParameter("nodoId", typeof(System.Guid));
    
            var textoParameter = texto != null ?
                new ObjectParameter("texto", texto) :
                new ObjectParameter("texto", typeof(string));
    
            var modificadoPorParameter = modificadoPor.HasValue ?
                new ObjectParameter("modificadoPor", modificadoPor) :
                new ObjectParameter("modificadoPor", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ActualizaTextoNodoCatalogoTransparencia", nodoIdParameter, textoParameter, modificadoPorParameter);
        }
    
        public virtual int sp_CreaCatalogoTransparenciaReportes(Nullable<System.Guid> mapeoId, string nombreArchivo, string descripcionArchivo, Nullable<System.DateTime> fechaInicio, Nullable<System.DateTime> fechaFin, Nullable<bool> visible, Nullable<System.Guid> subidoPor, Nullable<bool> verificaReistro)
        {
            var mapeoIdParameter = mapeoId.HasValue ?
                new ObjectParameter("mapeoId", mapeoId) :
                new ObjectParameter("mapeoId", typeof(System.Guid));
    
            var nombreArchivoParameter = nombreArchivo != null ?
                new ObjectParameter("nombreArchivo", nombreArchivo) :
                new ObjectParameter("nombreArchivo", typeof(string));
    
            var descripcionArchivoParameter = descripcionArchivo != null ?
                new ObjectParameter("descripcionArchivo", descripcionArchivo) :
                new ObjectParameter("descripcionArchivo", typeof(string));
    
            var fechaInicioParameter = fechaInicio.HasValue ?
                new ObjectParameter("fechaInicio", fechaInicio) :
                new ObjectParameter("fechaInicio", typeof(System.DateTime));
    
            var fechaFinParameter = fechaFin.HasValue ?
                new ObjectParameter("fechaFin", fechaFin) :
                new ObjectParameter("fechaFin", typeof(System.DateTime));
    
            var visibleParameter = visible.HasValue ?
                new ObjectParameter("visible", visible) :
                new ObjectParameter("visible", typeof(bool));
    
            var subidoPorParameter = subidoPor.HasValue ?
                new ObjectParameter("subidoPor", subidoPor) :
                new ObjectParameter("subidoPor", typeof(System.Guid));
    
            var verificaReistroParameter = verificaReistro.HasValue ?
                new ObjectParameter("verificaReistro", verificaReistro) :
                new ObjectParameter("verificaReistro", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CreaCatalogoTransparenciaReportes", mapeoIdParameter, nombreArchivoParameter, descripcionArchivoParameter, fechaInicioParameter, fechaFinParameter, visibleParameter, subidoPorParameter, verificaReistroParameter);
        }
    
        public virtual ObjectResult<Nullable<System.Guid>> sp_CreaNodoCatalogoTransparencia(Nullable<System.Guid> nodoPadreId, string descripcion, Nullable<int> orden, Nullable<System.Guid> modificadoPor, ObjectParameter nodoId)
        {
            var nodoPadreIdParameter = nodoPadreId.HasValue ?
                new ObjectParameter("nodoPadreId", nodoPadreId) :
                new ObjectParameter("nodoPadreId", typeof(System.Guid));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("descripcion", descripcion) :
                new ObjectParameter("descripcion", typeof(string));
    
            var ordenParameter = orden.HasValue ?
                new ObjectParameter("orden", orden) :
                new ObjectParameter("orden", typeof(int));
    
            var modificadoPorParameter = modificadoPor.HasValue ?
                new ObjectParameter("modificadoPor", modificadoPor) :
                new ObjectParameter("modificadoPor", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.Guid>>("sp_CreaNodoCatalogoTransparencia", nodoPadreIdParameter, descripcionParameter, ordenParameter, modificadoPorParameter, nodoId);
        }
    
        public virtual int sp_EliminaCatalogoTransparenciaReportes(Nullable<System.Guid> id, Nullable<System.Guid> modificadoPor)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(System.Guid));
    
            var modificadoPorParameter = modificadoPor.HasValue ?
                new ObjectParameter("modificadoPor", modificadoPor) :
                new ObjectParameter("modificadoPor", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_EliminaCatalogoTransparenciaReportes", idParameter, modificadoPorParameter);
        }
    
        public virtual int sp_EliminaNodoCatalogoTransparencia(Nullable<System.Guid> nodoId, Nullable<System.Guid> modificadoPor)
        {
            var nodoIdParameter = nodoId.HasValue ?
                new ObjectParameter("nodoId", nodoId) :
                new ObjectParameter("nodoId", typeof(System.Guid));
    
            var modificadoPorParameter = modificadoPor.HasValue ?
                new ObjectParameter("modificadoPor", modificadoPor) :
                new ObjectParameter("modificadoPor", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_EliminaNodoCatalogoTransparencia", nodoIdParameter, modificadoPorParameter);
        }
    
        public virtual int sp_ActualizaAplicaNodoCatalogoTransparencia(Nullable<System.Guid> nodoId, Nullable<bool> aplica, Nullable<System.Guid> modificadoPor)
        {
            var nodoIdParameter = nodoId.HasValue ?
                new ObjectParameter("nodoId", nodoId) :
                new ObjectParameter("nodoId", typeof(System.Guid));
    
            var aplicaParameter = aplica.HasValue ?
                new ObjectParameter("aplica", aplica) :
                new ObjectParameter("aplica", typeof(bool));
    
            var modificadoPorParameter = modificadoPor.HasValue ?
                new ObjectParameter("modificadoPor", modificadoPor) :
                new ObjectParameter("modificadoPor", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ActualizaAplicaNodoCatalogoTransparencia", nodoIdParameter, aplicaParameter, modificadoPorParameter);
        }
    
        public virtual int sp_ActualizaPrefijoNodoCatalogoTransparencia(Nullable<System.Guid> nodoId, string prefijo)
        {
            var nodoIdParameter = nodoId.HasValue ?
                new ObjectParameter("nodoId", nodoId) :
                new ObjectParameter("nodoId", typeof(System.Guid));
    
            var prefijoParameter = prefijo != null ?
                new ObjectParameter("prefijo", prefijo) :
                new ObjectParameter("prefijo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ActualizaPrefijoNodoCatalogoTransparencia", nodoIdParameter, prefijoParameter);
        }
    
        public virtual int sp_CreaMapeoReportes(Nullable<System.Guid> nodoId, string rutaFisica, string prefijo, ObjectParameter mapeoId)
        {
            var nodoIdParameter = nodoId.HasValue ?
                new ObjectParameter("nodoId", nodoId) :
                new ObjectParameter("nodoId", typeof(System.Guid));
    
            var rutaFisicaParameter = rutaFisica != null ?
                new ObjectParameter("rutaFisica", rutaFisica) :
                new ObjectParameter("rutaFisica", typeof(string));
    
            var prefijoParameter = prefijo != null ?
                new ObjectParameter("prefijo", prefijo) :
                new ObjectParameter("prefijo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CreaMapeoReportes", nodoIdParameter, rutaFisicaParameter, prefijoParameter, mapeoId);
        }
    }
}
